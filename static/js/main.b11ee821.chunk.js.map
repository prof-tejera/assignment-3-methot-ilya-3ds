{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/FlexDivs/FlexColumn.js","components/generic/Background/Background.js","components/generic/Button/NeonButtons.js","components/generic/FlexDivs/FlexRow.js","components/generic/Button/Button.js","components/generic/Paragraph/NeonParagraph.js","components/generic/Incrementer/Incrementer.js","components/generic/Input/Input.js","views/DocumentationView.js","components/Context/TimersContext.js","components/Context/MenuContext.js","components/timers/Countdown.js","components/timers/Stopwatch.js","components/timers/Tabata.js","components/timers/XY.js","components/Context/QueueContext.js","components/Context/CountdownContext.js","views/TimersView.js","views/Add.js","components/generic/Background/SimpleBackground.js","components/timers/SmallTimerInfo.js","views/Home.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","styles","justifyContent","alignItems","alignContent","FlexColumn","style","display","backgroundColor","color","width","height","flexDirection","margin","padding","boxSizing","spaceEvenly","className","children","defaultProps","Background","borderRadius","centered","spaceAround","NeonButton","onClick","textAlign","cursor","disabled","fontSize","selected","text","image","FlexRow","flexWrap","Button","NeonParagraph","textShadow","size","Incrementer","changeTime","direction","maxMin","value","onChange","max","background","e","target","isNaN","min","scale","addZeros","Input","TimerContext","createContext","TimerProvider","useState","milleseconds","setMilleseconds","seconds","setSeconds","minutes","setMinutes","hours","setHours","totalSeconds","setTotalSeconds","initialTime","setInitialTime","timerID","setTimerID","currentState","setCurrentState","work","setWork","rest","setRest","initialWork","setInitialWork","initialRest","setInitialRest","initialRound","setInitialRound","round","setRound","roundType","setRoundType","Provider","setDefaultState","MenuContext","MenuProvider","stopwatch","setStopwatch","countdown","setCountdown","xy","setXY","tabata","setTabata","menu","setMenu","Countdown","useContext","isActive","setIsActive","startCountdown","QueueContext","timer","useRef","useEffect","current","setInterval","convertSecondsToTimer","console","log","clearInterval","convertTimerToSeconds","start","ConvertedSeconds","Math","floor","hoursRemainder","initialSeconds","Stopwatch","Tabata","workSeconds","restSeconds","XY","stop","QueueProvider","componentArray","setComponentArray","undefined","queueArray","setQueueArray","queueActive","setQueueActive","setStartCountdown","startTabata","setStartTabata","startXY","setStartXY","startStopwatch","setStartStopwatch","name","setName","status","setStatus","currID","setCurrID","currentItem","setCurrentItem","savedInfo","setSavedInfo","allowUpdate","setAllowUpdate","JSON","parse","stringify","updateItem","Index","placeholderArray","id","nextItem","stopwatchFinished","countdownFinish","XYFinish","tabataFinish","startQueue","a","i","length","currItem","resetState","tabataStart","countdownStart","XYStart","stopwatchStart","countdownStop","tabataStop","XYStop","stopwatchStop","addComponent","concat","removeComponent","tempArray","splice","stopTimers","pauseTimers","resumeTimers","obj","CountdownContext","CountdownProvider","isCountdownActive","setIsCountdownActive","isTabataActive","setIsTabataActive","App","dataToSend","setDataToSend","returnToMenu","countdownStateArray","stopwatchStateArray","tabataStateArray","xyStateArray","to","Add","TimersView","SimpleBackground","SmallTimerInfo","index","pad","n","time","currRound","totalRound","currState","Home","currArray","setCurrArray","useArrayQueue","setUseArrayQueue","isPaused","setIsPaused","path","DocumentationView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b11ee821.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid #121212;\r\n  margin: 20px 0px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 20px;\r\n  font-size: 1.3rem;\r\n`;\r\n\r\nconst RenderComponent = styled.div`\r\n  padding: 25px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Documentation = styled.table``;\r\n\r\nclass DocumentComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>{this.props.title}</Title>\r\n        <Container>\r\n          <RenderComponent>{this.props.component}</RenderComponent>\r\n          <Documentation>\r\n            <tr>\r\n              <th>Prop</th>\r\n              <th>Description</th>\r\n              <th>Type</th>\r\n              <th>Default value</th>\r\n            </tr>\r\n            {this.props.propDocs.map((doc) => {\r\n              return (\r\n                <tr>\r\n                  <td>{doc.prop}</td>\r\n                  <td>{doc.description}</td>\r\n                  <td>{doc.type}</td>\r\n                  <td>\r\n                    <code>{doc.defaultValue}</code>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </Documentation>\r\n        </Container>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DocumentComponent;\r\n","\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  centered: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n  spaceEvenly: {\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"space-around\",\r\n  },\r\n};\r\n\r\nconst FlexColumn = props => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: props.color,\r\n          width: props.width,\r\n          height: props.height,\r\n          flexDirection: \"column\",\r\n          margin: props.margin,\r\n          padding: props.padding,\r\n          alignItems: \"center\",\r\n          alignContent: \"center\",\r\n          boxSizing: \"border-box\",\r\n          justifyContent: props.spaceEvenly ? styles.spaceEvenly.justifyContent : styles.centered.justifyContent\r\n        }}\r\n        className=\"Flex-Column\"\r\n      >\r\n        {props.children}\r\n      </div>\r\n    );\r\n}\r\n\r\nFlexColumn.propTypes = {\r\n  color: PropTypes.string,\r\n  width: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  height: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  margin: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  padding: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  spaceEvenly: PropTypes.string,\r\n}\r\n\r\nFlexColumn.defaultProps = {\r\n  color: \"none\",\r\n  width: \"auto\",\r\n  height: \"auto\",\r\n  margin: \"0px\",\r\n  padding: \"0px\",\r\n  spaceEvenly: \"false\"\r\n}\r\n\r\nexport default FlexColumn;\r\n","import \"./Background.css\";\r\nimport FlexColumn from \"../FlexDivs/FlexColumn.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Background = (props) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: \"black\",\r\n          width: props.width,\r\n          height: props.height,\r\n          flexDirection: \"column\",\r\n          padding: props.padding,\r\n          borderRadius: \"25px\",\r\n        }}\r\n        className=\"Background\"\r\n      >\r\n        <FlexColumn\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          centered=\"true\"\r\n          spaceAround=\"true\"\r\n        >\r\n          <div className=\"container\">\r\n            <FlexColumn\r\n              padding=\"10px\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              spaceAround=\"true\"\r\n            >\r\n              {props.children}\r\n            </FlexColumn>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n            <div className=\"frame\"></div>\r\n          </div>\r\n        </FlexColumn>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nBackground.propTypes = {\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  padding: PropTypes.string,\r\n};\r\n\r\nBackground.defaultProps = {\r\n  width: 300,\r\n  height: 400,\r\n  padding: \"10px\",\r\n};\r\n\r\nexport default Background;\r\n","\r\nimport \"./NeonButtons.css\"\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NeonButton = props => {\r\n    return (\r\n      <button\r\n        onClick={props.onClick}\r\n        style={\r\n          {\r\n            boxSizing: \"border-box\",\r\n            textAlign: \"center\",\r\n            width: props.width,\r\n            height: props.height,\r\n            cursor: props.disabled && \"auto\",\r\n            borderRadius: \"30px\",\r\n            fontSize: props.fontSize,\r\n            margin: props.margin,\r\n            padding: props.padding\r\n          }\r\n        }\r\n        className={props.className}\r\n        disabled={props.disabled}\r\n        selected={props.selected}\r\n\r\n      >\r\n        {props.text}\r\n        {props.image}\r\n        {props.children}\r\n      </button>\r\n    )\r\n}\r\n\r\nNeonButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  width: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  \r\n  height: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  margin: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  padding: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  className: PropTypes.string,\r\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n}\r\n\r\nNeonButton.defaultProps = {\r\n  width: 50,\r\n  height: \"50px\",\r\n  className: \"StartButton\",\r\n  disabled: false,\r\n  margin: \"2px\",\r\n  padding: \"2px\"\r\n}\r\n\r\n\r\nexport default NeonButton;","\r\nimport PropTypes from 'prop-types';\r\nconst styles = {\r\n  centered: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n  spaceEvenly: {\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"space-around\",\r\n  },\r\n};\r\n\r\nconst FlexRow = props => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: props.color,\r\n          width: props.width,\r\n          height: props.height,\r\n          flexDirection: \"row\",\r\n          flexWrap: \"wrap\",\r\n          margin: props.margin,\r\n          padding: props.padding,\r\n          alignItems: \"center\",\r\n          alignContent: \"center\",\r\n          boxSizing: \"border-box\",\r\n          justifyContent: props.spaceEvenly ? styles.spaceEvenly.justifyContent : styles.centered.justifyContent\r\n        }}\r\n        className=\"Flex-Row\"\r\n      >\r\n        {props.children}\r\n      </div>\r\n    );\r\n}\r\n\r\nFlexRow.propTypes = {\r\n  color: PropTypes.string,\r\n  width: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  height: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  margin: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  padding: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  spaceEvenly: PropTypes.string,\r\n}\r\n\r\nFlexRow.defaultProps = {\r\n  color: \"none\",\r\n  width: \"auto\",\r\n  height: \"auto\",\r\n  margin: \"0px\",\r\n  padding: \"0px\",\r\n  spaceEvenly: \"false\"\r\n}\r\n\r\n\r\nexport default FlexRow;\r\n","\r\nimport \"./Button.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = props => {\r\n\r\n    return (\r\n      <button\r\n        onClick={props.onClick}\r\n        style={\r\n          {\r\n            boxSizing: \"border-box\",\r\n            textAlign: \"center\",\r\n            backgroundColor: props.color,\r\n            width: props.width,\r\n            height: props.height,\r\n            cursor: props.disabled && \"auto\",\r\n            borderRadius: \"30px\",\r\n            fontSize: props.fontSize\r\n          }\r\n        }\r\n        className={props.className}\r\n        disabled={props.disabled}\r\n        selected={props.selected}\r\n\r\n      >\r\n        {props.image}\r\n        {props.children}\r\n      </button>\r\n    )\r\n  \r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  color: PropTypes.string,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  className: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  selected: PropTypes.bool,\r\n  fontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n}\r\n\r\nButton.defaultProps = {\r\n  width: \"50\",\r\n  height: \"50\",\r\n  className: \"Default-button\",\r\n  disabled: false,\r\n  selected: false,\r\n  color: \"black\",\r\n  fontSize: \"auto\"\r\n}\r\n\r\nexport default Button;","import \"./NeonParagraph.css\"\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NeonParagraph = props => {\r\n\r\n    return <p style={{\r\n        color: props.color,\r\n        textShadow: `0 0 10px ${props.color}`,\r\n        fontSize: props.size,\r\n        className: \"NeonParagraph\",\r\n        height: props.height,\r\n        width: props.width,\r\n        margin: \"0px\",\r\n        padding: props.padding,\r\n        boxSizing: \"border-box\",\r\n        textAlign:\"center\"\r\n    }}>{props.children}</p>;\r\n  }\r\n\r\nNeonParagraph.propTypes = {\r\n  color: PropTypes.string,\r\n  width: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  height: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  size: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  padding: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ])\r\n}\r\n\r\nNeonParagraph.defaultProps = {\r\n  color: \"Blue\",\r\n  width: \"auto\",\r\n  height: \"auto\",\r\n  size: \"24px\",\r\n  padding: \"10px\"\r\n}\r\n\r\nexport default NeonParagraph;\r\n","import Button from \"../Button/Button\";\r\nimport FlexColumn from \"../FlexDivs/FlexColumn\";\r\nimport FlexRow from \"../FlexDivs/FlexRow\";\r\nimport \"./Incrementer.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../Input/Input.css\";\r\nimport NeonButton from \"../Button/NeonButtons\";\r\nimport NeonParagraph from \"../Paragraph/NeonParagraph\";\r\n\r\nconst Incrementer = (props) => {\r\n  const changeTime = (direction, maxMin) => {\r\n    if (direction === \"increment\") {\r\n      if (props.value < maxMin) {\r\n        props.onChange(props.value + 1);\r\n      }\r\n    } else {\r\n      if (props.value > maxMin) {\r\n        props.onChange(props.value - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add leading zeros\r\n  // src: https://www.codegrepper.com/code-examples/javascript/react+js+add+leading+zeros\r\n\r\n  function padLeadingZeros(num, size) {\r\n    var s = num + \"\";\r\n    while (s.length < size) s = \"0\" + s;\r\n    return s;\r\n  }\r\n  // examples:\r\n  // padLeadingZeros(57, 3);// \"057\"\r\n  // padLeadingZeros(57, 4); //\"0057\"\r\n\r\n  return (\r\n    <>\r\n      <FlexColumn\r\n        padding=\"10px\"\r\n        width=\"auto\"\r\n        height=\"auto\"\r\n        centered=\"true\"\r\n        spaceEvenly=\"true\"\r\n        margin={props.margin}\r\n      >\r\n        <FlexRow width=\"auto\" height=\"auto\" spaceEvenly=\"true\" centered=\"true\">\r\n          <Button\r\n            onClick={() => {\r\n              changeTime(\"increment\", props.max);\r\n            }}\r\n            className=\"smallButton\"\r\n            width={props.width / 2}\r\n            height={props.height / 2}\r\n          >\r\n            ^\r\n          </Button>\r\n        </FlexRow>\r\n        <FlexRow padding={props.padding} width=\"auto\" height=\"auto\" centered=\"true\">\r\n          <NeonButton  \r\n            height={props.height * 3}\r\n            width={props.width * 5}\r\n            disabled=\"true\"\r\n            className=\"display\"\r\n            padding=\"5px\"\r\n          >\r\n            <input\r\n              style={{\r\n                background: \"none\",\r\n                color: \"white\",\r\n                boxSizing: \"border-box\",\r\n                textAlign: \"center\",\r\n                width: props.width,\r\n                height: props.height,\r\n                cursor: \"auto\",\r\n                borderRadius: \"30px\",\r\n                fontSize: \"auto\",\r\n              }}\r\n              value={props.value}\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                if (!isNaN(+value)) {\r\n                  if (+value <= props.max && +value >= props.min) {\r\n                    props.onChange(e.target.value);\r\n                  }\r\n                }\r\n              }}\r\n            ></input>\r\n            <NeonParagraph color=\"white\" padding=\"0px\" size=\".1\">{props.scale}</NeonParagraph>\r\n          </NeonButton>\r\n        </FlexRow>\r\n        <FlexRow width=\"auto\" height=\"auto\" spaceEvenly=\"true\" centered=\"true\">\r\n          <Button\r\n            onClick={() => changeTime(\"decrease\", props.min)}\r\n            className=\"smallButton\"\r\n            width={props.width / 2}\r\n            height={props.height / 2}\r\n          >\r\n            v\r\n          </Button>\r\n        </FlexRow>\r\n      </FlexColumn>\r\n    </>\r\n  );\r\n};\r\n\r\nIncrementer.propTypes = {\r\n  color: PropTypes.string,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  addZeros: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  scale: PropTypes.string,\r\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  onChange: PropTypes.func,\r\n  value: PropTypes.number,\r\n};\r\n\r\nIncrementer.defaultProps = {\r\n  width: 50,\r\n  height: 50,\r\n  max: 10,\r\n  min: 0,\r\n  addZeros: 0,\r\n  scale: \"\",\r\n  margin: \"0px\",\r\n  padding: \"0px\",\r\n  value: 0,\r\n};\r\n\r\nexport default Incrementer;\r\n","import PropTypes from 'prop-types';\r\nimport \"./Input.css\"\r\n\r\nexport const Input = props => {\r\n\r\n \r\n\r\n  return (\r\n    <input\r\n      style={\r\n        {\r\n          boxSizing: \"border-box\",\r\n          textAlign: \"center\",\r\n          width: props.width,\r\n          height: props.height,\r\n          cursor: \"auto\",\r\n          borderRadius: \"30px\",\r\n          fontSize: \"auto\"\r\n        }\r\n      }\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      className=\"display\"\r\n    >\r\n    </input>\r\n  )\r\n}\r\n\r\n\r\nInput.propTypes = {\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  value: PropTypes.number,\r\n  onChange: PropTypes.string\r\n}\r\n\r\nInput.defaultProps = {\r\n  width: 50,\r\n  height: 50,\r\n  value: 0\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\r\nimport Background from \"../components/generic/Background/Background\";\r\nimport NeonButton from \"../components/generic/Button/NeonButtons\";\r\nimport FlexColumn from \"../components/generic/FlexDivs/FlexColumn.js\"\r\nimport FlexRow from \"../components/generic/FlexDivs/FlexRow\";\r\nimport Incrementer from \"../components/generic/Incrementer/Incrementer\";\r\nimport Input from \"../components/generic/Input/Input\";\r\nimport NeonParagraph from \"../components/generic/Paragraph/NeonParagraph\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 2rem;\r\n`;\r\n\r\nclass Documentation extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <Title>Documentation</Title>\r\n          <DocumentComponent\r\n            title=\"NeonButton\"\r\n            component={<NeonButton>btn</NeonButton>}\r\n            propDocs={[\r\n              {\r\n                prop: \"onClick\",\r\n                description: \"Method that runs when button is clicked\",\r\n                type: \"func\",\r\n                defaultValue: \"none\",\r\n              },\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of button\",\r\n                type: \"string, number\",\r\n                defaultValue: \"50, 50px\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of button\",\r\n                type: \"string, number\",\r\n                defaultValue: \"50, 50px\",\r\n              },\r\n              {\r\n                prop: \"className\",\r\n                description: `Use to change the style of the Button. \r\n                Currently available options include: StartButton, ClearButton, PauseButton, RestartButton, display, smallButton`,\r\n                type: \"string\",\r\n                defaultValue: \"StartButton\",\r\n              },\r\n              {\r\n                prop: \"disabled\",\r\n                description: \"Choose whether button is disabled (clickable)\",\r\n                type: \"bool\",\r\n                defaultValue: \"false\",\r\n              },\r\n            ]}\r\n          />\r\n          <DocumentComponent\r\n            title=\"Input\"\r\n            component={<Input/>}\r\n            propDocs={[\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of Input\",\r\n                type: \"string, number\",\r\n                defaultValue: \"50, 50px\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of Input\",\r\n                type: \"string, number\",\r\n                defaultValue: \"50, 50px\",\r\n              },\r\n              {\r\n                prop: \"disabled\",\r\n                description: \"Choose whether button is disabled (clickable)\",\r\n                type: \"bool\",\r\n                defaultValue: \"false\",\r\n              },\r\n            ]}\r\n          />\r\n          <DocumentComponent\r\n            title=\"FlexColumn\"\r\n            component={<FlexColumn><NeonButton>btn</NeonButton><NeonButton className=\"RestartButton\">btn</NeonButton><NeonButton className=\"ClearButton\">btn</NeonButton></FlexColumn>}\r\n            propDocs={[\r\n              {\r\n                prop: \"color\",\r\n                description: \"Changes the color of the background\",\r\n                type: \"string\",\r\n                defaultValue: \"white\",\r\n              },\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"margin\",\r\n                description: \"Margin of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"0px\",\r\n              },\r\n              {\r\n                prop: \"padding\",\r\n                description: \"padding of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"10px\",\r\n              },\r\n              {\r\n                prop: \"spaceEvenly\",\r\n                description: \"determines whether to space child content evenly. If 'false', center the content\",\r\n                type: \"string\",\r\n                defaultValue: \"false\",\r\n              },\r\n            ]}\r\n          />\r\n          <DocumentComponent\r\n            title=\"FlexRow\"\r\n            component={<FlexRow><NeonButton>btn</NeonButton><NeonButton className=\"RestartButton\">btn</NeonButton><NeonButton className=\"ClearButton\">btn</NeonButton></FlexRow>}\r\n            propDocs={[\r\n              {\r\n                prop: \"color\",\r\n                description: \"Changes the color of the background\",\r\n                type: \"string\",\r\n                defaultValue: \"white\",\r\n              },\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"margin\",\r\n                description: \"Margin of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"0px\",\r\n              },\r\n              {\r\n                prop: \"padding\",\r\n                description: \"padding of div\",\r\n                type: \"string, number\",\r\n                defaultValue: \"10px\",\r\n              },\r\n              {\r\n                prop: \"spaceEvenly\",\r\n                description: \"determines whether to space child content evenly. If 'false', center the content\",\r\n                type: \"string\",\r\n                defaultValue: \"false\",\r\n              },\r\n            ]}\r\n          />\r\n           <DocumentComponent\r\n            title=\"NeonParagraph\"\r\n            component={<NeonParagraph>Neon Text</NeonParagraph>}\r\n            propDocs={[\r\n              {\r\n                prop: \"color\",\r\n                description: \"Changes the color of the text\",\r\n                type: \"string\",\r\n                defaultValue: \"Blue\",\r\n              },\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of text container\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of text container\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"size\",\r\n                description: \"Size of text\",\r\n                type: \"string, number\",\r\n                defaultValue: \"24px\",\r\n              },\r\n              {\r\n                prop: \"padding\",\r\n                description: \"padding of text container\",\r\n                type: \"string, number\",\r\n                defaultValue: \"10px\",\r\n              },\r\n            ]}\r\n          />\r\n          <DocumentComponent\r\n            title=\"Incrementer\"\r\n            component={<Incrementer/>}\r\n            propDocs={[\r\n              {\r\n                prop: \"max\",\r\n                description: \"Max number the counter will increase to\",\r\n                type: \"number\",\r\n                defaultValue: \"10\",\r\n              },\r\n              {\r\n                prop: \"max\",\r\n                description: \"Min number the counter will decrease to\",\r\n                type: \"number\",\r\n                defaultValue: \"0\",\r\n              },\r\n              {\r\n                prop: \"addZeros\",\r\n                description: \"Display will always display this many numbers (example: setting addZeros to 2 will make 5 display as 05)\",\r\n                type: \"number\",\r\n                defaultValue: \"0\",\r\n              },\r\n              {\r\n                prop: \"scale\",\r\n                description: \"Character that appears besides number indicator display a scale (min, m, sec, s)\",\r\n                type: \"string\",\r\n                defaultValue: \"\",\r\n              },\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"auto\",\r\n              },\r\n              {\r\n                prop: \"padding\",\r\n                description: \"padding of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"10px\",\r\n              },\r\n              {\r\n                prop: \"margin\",\r\n                description: \"Margin of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"0px\",\r\n              },\r\n            ]}\r\n          />\r\n          <DocumentComponent\r\n            title=\"Background\"\r\n            component={<Background/>}\r\n            propDocs={[\r\n              {\r\n                prop: \"width\",\r\n                description: \"Width of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"300\",\r\n              },\r\n              {\r\n                prop: \"height\",\r\n                description: \"Height of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"400\",\r\n              },\r\n              {\r\n                prop: \"padding\",\r\n                description: \"padding of object\",\r\n                type: \"string, number\",\r\n                defaultValue: \"10px\",\r\n              }\r\n            ]}\r\n          />\r\n        </div>\r\n        \r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Documentation;\r\n","import React, { createContext, useState } from 'react';\r\n\r\nexport const TimerContext = createContext();\r\n\r\nexport const TimerProvider = (props) => {\r\n\r\n    const setDefaultState = () => {\r\n        setSeconds(0);\r\n        setMinutes(0);\r\n        setTotalSeconds(0);\r\n        setInitialTime(0);\r\n        setTimerID(0);\r\n        setWork(0);\r\n        setRest(0);\r\n        setInitialWork(0);\r\n        setInitialRest(0);\r\n        setInitialRound(0);\r\n        setRound(1);\r\n    }\r\n\r\n    // most timers\r\n    const [milleseconds, setMilleseconds] = useState(0);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [hours, setHours] = useState(0);\r\n    const [totalSeconds, setTotalSeconds] = useState(0);\r\n    const [initialTime, setInitialTime] = useState(0);\r\n    const [timerID, setTimerID] = useState(0);\r\n\r\n    // tabata\r\n    const [currentState, setCurrentState] = useState(\"work\");\r\n    const [work, setWork] = useState(0);\r\n    const [rest, setRest] = useState(0);\r\n    const [initialWork, setInitialWork] = useState(0);\r\n    const [initialRest, setInitialRest] = useState(0);\r\n    const [initialRound, setInitialRound] = useState(1);\r\n    const [round, setRound] = useState(1);\r\n    const [roundType, setRoundType] = useState(\"work\");\r\n\r\n\r\n    const [status, setStatus] = useState(\"\")\r\n\r\n\r\n    return (\r\n        \r\n        <TimerContext.Provider\r\n            value={{\r\n                milleseconds, setMilleseconds,\r\n                seconds, setSeconds,\r\n                minutes, setMinutes,\r\n                hours, setHours,\r\n                totalSeconds, setTotalSeconds,\r\n                initialTime, setInitialTime,\r\n                timerID, setTimerID,\r\n                currentState, setCurrentState,\r\n                work, setWork,\r\n                rest, setRest,\r\n                initialWork, setInitialWork,\r\n                initialRest, setInitialRest,\r\n                initialRound, setInitialRound,\r\n                round, setRound,\r\n                setDefaultState,\r\n                roundType, setRoundType\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TimerContext.Provider>\r\n        \r\n    );\r\n}","import React, { createContext, useState } from \"react\";\r\n\r\nexport const MenuContext = createContext();\r\n\r\nexport const MenuProvider = (props) => {\r\n  const [stopwatch, setStopwatch] = useState(false);\r\n  const [countdown, setCountdown] = useState(false);\r\n  const [xy, setXY] = useState(false);\r\n  const [tabata, setTabata] = useState(false);\r\n  const [menu, setMenu] = useState(true);\r\n\r\n  return (\r\n    <MenuContext.Provider\r\n      value={{\r\n        stopwatch,\r\n        setStopwatch,\r\n        xy,\r\n        setXY,\r\n        tabata,\r\n        setTabata,\r\n        menu,\r\n        setMenu,\r\n        countdown,\r\n        setCountdown,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MenuContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport FlexRow from \"../generic/FlexDivs/FlexRow\";\r\nimport Background from \"../generic/Background/Background\";\r\nimport Incrementer from \"../generic/Incrementer/Incrementer\";\r\nimport NeonParagraph from \"../generic/Paragraph/NeonParagraph\";\r\nimport NeonButton from \"../generic/Button/NeonButtons\";\r\nimport { TimerContext } from \"../Context/TimersContext\";\r\nimport { QueueContext } from \"../Context/QueueContext\";\r\n\r\nconst Countdown = (props) => {\r\n  const { seconds, setSeconds } = useContext(TimerContext);\r\n  const { minutes, setMinutes } = useContext(TimerContext);\r\n  const { hours, setHours } = useContext(TimerContext);\r\n  const { totalSeconds, setTotalSeconds } = useContext(TimerContext);\r\n  const { initialTime, setInitialTime } = useContext(TimerContext);\r\n  const [ isActive, setIsActive ] = useState(false);\r\n\r\n  const { startCountdown } = useContext(QueueContext);\r\n\r\n  let timer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    timer.current = setInterval(() => {\r\n      if (isActive) {\r\n        if (totalSeconds > 0) {\r\n          const seconds = totalSeconds - 1;\r\n          setTotalSeconds(seconds);\r\n          convertSecondsToTimer(seconds);\r\n\r\n          console.log(totalSeconds);\r\n        } else {\r\n          clearInterval(timer.current);\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [isActive, totalSeconds]);\r\n\r\n  useEffect(() => {\r\n    setTotalSeconds(convertTimerToSeconds());\r\n  }, [seconds, minutes]);\r\n\r\n  useEffect(() => {\r\n    if (startCountdown) {\r\n      start();\r\n    }\r\n  }, [startCountdown]);\r\n\r\n  const convertTimerToSeconds = () => {\r\n    const totalSeconds = minutes * 60 + seconds;\r\n    return totalSeconds;\r\n  };\r\n\r\n  const convertSecondsToTimer = (ConvertedSeconds) => {\r\n    setHours(Math.floor(ConvertedSeconds / 3600));\r\n    const hoursRemainder = ConvertedSeconds % 3600;\r\n    setMinutes(Math.floor(hoursRemainder / 60));\r\n    setSeconds(hoursRemainder % 60);\r\n  };\r\n\r\n  const start = () => {\r\n    if (startCountdown) {\r\n      const initialSeconds = convertTimerToSeconds();\r\n      if (initialSeconds > 0) {\r\n        setIsActive(true);\r\n        setInitialTime(initialSeconds);\r\n        setTotalSeconds(convertTimerToSeconds());\r\n      }\r\n    }\r\n  };\r\n\r\n  const stop = () => {\r\n    clearInterval(timer.current);\r\n  };\r\n\r\n  const restart = () => {\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(initialTime);\r\n  };\r\n\r\n  const clear = () => {\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(0);\r\n  };\r\n\r\n  return (\r\n    // Convert all of the days, hours, minutes, and seconds into seconds so we can more easily process the data\r\n\r\n    <>\r\n      {start()}\r\n      <Background centered=\"true\" width=\"300px\" padding=\"20px\">\r\n        <FlexRow height=\"25%\" centered=\"true\">\r\n          <NeonParagraph color=\"#00C0F9\" size=\"24px\">\r\n            Countdown\r\n          </NeonParagraph>\r\n        </FlexRow>\r\n        <FlexRow\r\n          height=\"25%\"\r\n          padding=\"10px\"\r\n          spaceEvenly=\"true\"\r\n          centered=\"true\"\r\n          width=\"100%\"\r\n        >\r\n          <Incrementer\r\n            width=\"30px\"\r\n            height=\"30px\"\r\n            max=\"60\"\r\n            min=\"0\"\r\n            scale=\"m\"\r\n            addZeros={2}\r\n            value={minutes}\r\n            onChange={setMinutes}\r\n          />\r\n          <Incrementer\r\n            width=\"30px\"\r\n            height=\"30px\"\r\n            max=\"60\"\r\n            min=\"0\"\r\n            scale=\"s\"\r\n            addZeros={2}\r\n            value={seconds}\r\n            onChange={setSeconds}\r\n          />\r\n        </FlexRow>\r\n        \r\n      </Background>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport FlexRow from \"../generic/FlexDivs/FlexRow\";\r\nimport Background from \"../generic/Background/Background\";\r\nimport NeonParagraph from \"../generic/Paragraph/NeonParagraph\";\r\nimport { TimerContext } from \"../Context/TimersContext\";\r\nimport { MenuContext } from \"../Context/MenuContext\";\r\nimport Incrementer from \"../generic/Incrementer/Incrementer\";\r\n\r\nconst Stopwatch = (props) => {\r\n  const { seconds, setSeconds } = useContext(TimerContext);\r\n  const { minutes, setMinutes } = useContext(TimerContext);\r\n  const { totalSeconds, setTotalSeconds } = useContext(TimerContext);\r\n  const {initialTime, setInitialTime} = useContext(TimerContext);\r\n  const { convertSecondsToTimer } = useContext(TimerContext);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  let timer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      timer.current = setInterval(() => {\r\n        const seconds = totalSeconds + 0.01;\r\n        setTotalSeconds(seconds);\r\n        convertSecondsToTimer(seconds);\r\n      }, 10);\r\n\r\n      return () => {\r\n        clearInterval(timer.current);\r\n      };\r\n    }\r\n  }, [isActive, totalSeconds]);\r\n\r\n  useEffect(() => {\r\n    setInitialTime(convertTimerToSeconds());\r\n  }, [seconds, minutes]);\r\n\r\n  const convertTimerToSeconds = () => {\r\n    const totalSeconds = minutes * 60 + seconds;\r\n    return totalSeconds;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Background centered=\"true\" width=\"300px\" padding=\"20px\">\r\n        <FlexRow height=\"25%\" centered=\"true\">\r\n          <NeonParagraph color=\"#00C0F9\" size=\"24px\">\r\n            Stopwatch\r\n          </NeonParagraph>\r\n        </FlexRow>\r\n        <FlexRow height=\"75%\" spaceEvenly=\"true\" width=\"auto\" centered=\"true\">\r\n          <FlexRow\r\n            height=\"25%\"\r\n            padding=\"10px\"\r\n            spaceEvenly=\"true\"\r\n            centered=\"true\"\r\n            width=\"100%\"\r\n          >\r\n            <Incrementer\r\n              width=\"100px\"\r\n              height=\"30px\"\r\n              max=\"60\"\r\n              min=\"0\"\r\n              scale=\"Minutes\"\r\n              addZeros={2}\r\n              value={minutes}\r\n              onChange={setMinutes}\r\n            />\r\n            <Incrementer\r\n              width=\"100px\"\r\n              height=\"30px\"\r\n              max=\"60\"\r\n              min=\"0\"\r\n              scale=\"Seconds\"\r\n              addZeros={2}\r\n              value={seconds}\r\n              onChange={setSeconds}\r\n            />\r\n          </FlexRow>\r\n        </FlexRow>\r\n      </Background>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport FlexColumn from \"../generic/FlexDivs/FlexColumn\";\r\nimport FlexRow from \"../generic/FlexDivs/FlexRow\";\r\nimport Background from \"../generic/Background/Background\";\r\nimport Incrementer from \"../generic/Incrementer/Incrementer\";\r\nimport NeonParagraph from \"../generic/Paragraph/NeonParagraph\";\r\nimport NeonButton from \"../generic/Button/NeonButtons\";\r\nimport { TimerContext } from \"../Context/TimersContext\";\r\nimport { MenuContext } from \"../Context/MenuContext\";\r\n\r\nconst Tabata = (props) => {\r\n  const { work, setWork } = useContext(TimerContext);\r\n  const { rest, setRest } = useContext(TimerContext);\r\n  const { initialWork, setInitialWork } = useContext(TimerContext);\r\n  const { initialRest, setInitialRest } = useContext(TimerContext);\r\n  const { initialRound, setInitialRound } = useContext(TimerContext);\r\n  const { round, setRound } = useContext(TimerContext);\r\n  const { roundType, setRoundType } = useContext(TimerContext);\r\n  const { totalSeconds, setTotalSeconds } = useContext(TimerContext);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  let timer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    timer.current = setInterval(() => {\r\n      if (isActive) {\r\n        if (work > 0) {\r\n          setRoundType(\"work\");\r\n          const workSeconds = work - 1;\r\n          setWork(workSeconds);\r\n          setTotalSeconds(workSeconds);\r\n        } else if (rest > 0) {\r\n          setRoundType(\"rest\");\r\n          const restSeconds = rest - 1;\r\n          setRest(restSeconds);\r\n          setTotalSeconds(restSeconds);\r\n        } else if (round > 1) {\r\n          setRoundType(\"work\");\r\n          const currRound = round - 1;\r\n          setRound(currRound);\r\n          setWork(initialWork);\r\n          setRest(initialRest);\r\n          setTotalSeconds(work);\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [isActive, round, rest, work]);\r\n\r\n  useEffect(() => {\r\n    setRound(round);\r\n    setInitialRound(round);\r\n    if (work > 0) {\r\n      setTotalSeconds(work);\r\n    } else {\r\n      setTotalSeconds(rest);\r\n    }\r\n  }, [work, rest, round]);\r\n\r\n  return (\r\n    <>\r\n      <Background centered=\"true\" height=\"400px\" width=\"300px\" padding=\"20px\">\r\n        <NeonParagraph padding=\"10px\" height=\"10%\" color=\"#00C0F9\" size=\"36px\">\r\n          Tabata\r\n        </NeonParagraph>\r\n\r\n        <FlexColumn>\r\n          <NeonParagraph\r\n            padding=\"10px\"\r\n            height=\"10%\"\r\n            color=\"#00C0F9\"\r\n            size=\"18px\"\r\n          >\r\n            Round\r\n          </NeonParagraph>\r\n          <Incrementer\r\n            value={round}\r\n            onChange={setRound}\r\n            padding=\"10px\"\r\n            width=\"30px\"\r\n            height=\"auto\"\r\n            max=\"60\"\r\n            min=\"1\"\r\n          />\r\n        </FlexColumn>\r\n\r\n        <FlexRow width=\"100%\" height=\"50%\" padding=\"10px\">\r\n          <FlexColumn>\r\n            <NeonParagraph\r\n              color=\"#00C0F9\"\r\n              size=\"14px\"\r\n            >\r\n              Work\r\n            </NeonParagraph>\r\n            <Incrementer\r\n              padding=\"5px\"\r\n              value={work}\r\n              onChange={setWork}\r\n              width=\"60px\"\r\n              height=\"auto\"\r\n              max=\"60\"\r\n              min=\"0\"\r\n              scale=\"Seconds\"\r\n              addZeros=\"2\"\r\n            />\r\n          </FlexColumn>\r\n          <FlexColumn centered=\"true\">\r\n            <NeonParagraph color=\"#00C0F9\" size=\"14px\">\r\n              Rest\r\n            </NeonParagraph>\r\n            <Incrementer\r\n              padding=\"5px\"\r\n              value={rest}\r\n              onChange={setRest}\r\n              width=\"60px\"\r\n              height=\"auto\"\r\n              max=\"60\"\r\n              min=\"0\"\r\n              scale=\"Seconds\"\r\n              addZeros=\"2\"\r\n            />\r\n          </FlexColumn>\r\n        </FlexRow>\r\n      </Background>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tabata;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport FlexColumn from \"../generic/FlexDivs/FlexColumn\";\r\nimport FlexRow from \"../generic/FlexDivs/FlexRow\";\r\nimport Background from \"../generic/Background/Background\";\r\nimport Incrementer from \"../generic/Incrementer/Incrementer\";\r\nimport NeonParagraph from \"../generic/Paragraph/NeonParagraph\";\r\nimport NeonButton from \"../generic/Button/NeonButtons\";\r\nimport { TimerContext } from \"../Context/TimersContext\";\r\nimport { MenuContext } from \"../Context/MenuContext\";\r\n\r\nconst XY = (props) => {\r\n  const { round, setRound } = useContext(TimerContext);\r\n  const { seconds, setSeconds } = useContext(TimerContext);\r\n  const { minutes, setMinutes } = useContext(TimerContext);\r\n  const { hours, setHours } = useContext(TimerContext);\r\n  const { totalSeconds, setTotalSeconds } = useContext(TimerContext);\r\n  const { initialTime, setInitialTime } = useContext(TimerContext);\r\n  const {initialRound, setInitialRound} = useContext(TimerContext);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n\r\n  let timer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    timer.current = setInterval(() => {\r\n      if (isActive) {\r\n        if (totalSeconds > 0) {\r\n          const seconds = totalSeconds - 1;\r\n          setTotalSeconds(seconds);\r\n          convertSecondsToTimer(seconds);\r\n        } else {\r\n          if (round > 1) {\r\n            const currRound = round - 1;\r\n            setRound(currRound);\r\n            convertSecondsToTimer(initialTime);\r\n          } else {\r\n            stop();\r\n          }\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [isActive, totalSeconds]);\r\n\r\n  useEffect(() => {\r\n    setRound(round);\r\n    setTotalSeconds(convertTimerToSeconds());\r\n\r\n  }, [minutes, seconds, round])\r\n\r\n  // Convert all of the days, hours, minutes, and seconds into seconds so we can more easily process the data\r\n\r\n  const convertTimerToSeconds = () => {\r\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds;\r\n    return totalSeconds;\r\n  };\r\n\r\n  // Convert seconds into days, hours, minutes, and seconds for the countdown presentation\r\n\r\n  const convertSecondsToTimer = (ConvertedSeconds) => {\r\n  \r\n    setMinutes(Math.floor(ConvertedSeconds / 60));\r\n    setSeconds(ConvertedSeconds % 60);\r\n  };\r\n\r\n  // Buttons Start\r\n  //\r\n\r\n  const start = () => {\r\n    const initialSeconds = convertTimerToSeconds();\r\n    setInitialRound(round);\r\n    setInitialTime(initialSeconds);\r\n    setTotalSeconds(convertTimerToSeconds());\r\n    setIsActive(true);\r\n  };\r\n\r\n  const stop = () => {\r\n    clearInterval(timer.current);\r\n  };\r\n\r\n  const restart = () => {\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(initialTime);\r\n  };\r\n\r\n  const clear = () => {\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Background centered=\"true\" width=\"300px\" padding=\"20px\">\r\n        <FlexRow height=\"25%\" centered=\"true\">\r\n          <NeonParagraph color=\"#00C0F9\" size=\"24px\">\r\n            XY\r\n          </NeonParagraph>\r\n        </FlexRow>\r\n        <FlexRow height=\"25%\" padding=\"10px\" width=\"100%\">\r\n          <NeonParagraph color=\"#00C0F9\">Round</NeonParagraph>\r\n          <Incrementer\r\n            value={round}\r\n            onChange={setRound}\r\n            width=\"30px\"\r\n            height=\"30px\"\r\n            max=\"10\"\r\n            min=\"1\"\r\n          />\r\n        </FlexRow>\r\n        <FlexRow height=\"25%\" padding=\"10px\" spaceEvenly=\"true\" width=\"100%\">\r\n          <Incrementer\r\n            value={minutes}\r\n            onChange={setMinutes}\r\n            width=\"50px\"\r\n            height=\"30px\"\r\n            max=\"60\"\r\n            min=\"0\"\r\n            scale=\"m\"\r\n            addZeros=\"2\"\r\n          />\r\n          <Incrementer\r\n            value={seconds}\r\n            onChange={setSeconds}\r\n            width=\"50px\"\r\n            height=\"30px\"\r\n            max=\"60\"\r\n            min=\"0\"\r\n            scale=\"s\"\r\n            addZeros=\"2\"\r\n          />\r\n        </FlexRow>\r\n      </Background>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default XY;\r\n","import React, { createContext, useState, useEffect, useRef } from \"react\";\r\nimport Countdown from \"../timers/Countdown\";\r\nimport Stopwatch from \"../timers/Stopwatch\";\r\nimport Tabata from \"../timers/Tabata\";\r\nimport XY from \"../timers/XY\";\r\nimport { CountdownContext } from \"./CountdownContext\";\r\n\r\nexport const QueueContext = createContext();\r\n\r\nexport const QueueProvider = (props) => {\r\n  // Queues\r\n\r\n  const [componentArray, setComponentArray] = useState([]);\r\n  const [queueArray, setQueueArray] = useState(undefined);\r\n\r\n  // Current Queue\r\n  const [queueActive, setQueueActive] = useState(false);\r\n\r\n  const [startCountdown, setStartCountdown] = useState(false);\r\n  const [startTabata, setStartTabata] = useState(false);\r\n  const [startXY, setStartXY] = useState(false);\r\n  const [startStopwatch, setStartStopwatch] = useState(false);\r\n\r\n  // Timer info\r\n  const [name, setName] = useState(\"timer\");\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [totalSeconds, setTotalSeconds] = useState(0);\r\n  const [initialTime, setInitialTime] = useState(0);\r\n  const [work, setWork] = useState(0);\r\n  const [rest, setRest] = useState(0);\r\n  const [initialWork, setInitialWork] = useState(0);\r\n  const [initialRest, setInitialRest] = useState(0);\r\n  const [initialRound, setInitialRound] = useState(0);\r\n  const [round, setRound] = useState(0);\r\n  const [roundType, setRoundType] = useState(\"work\");\r\n\r\n  // timer Status\r\n  const [status, setStatus] = useState(\"in-queue\");\r\n  const [currID, setCurrID] = useState(0);\r\n\r\n  let timer = useRef(null);\r\n  const [currentItem, setCurrentItem] = useState({});\r\n  const [savedInfo, setSavedInfo] = useState({});\r\n  const [allowUpdate, setAllowUpdate] = useState(true);\r\n\r\n  // Queue Methods\r\n\r\n  useEffect(() => {\r\n    // Set temporary array so we can revert back to the original\r\n    setQueueArray(JSON.parse(JSON.stringify(componentArray)));\r\n  }, [JSON.stringify(componentArray)]);\r\n\r\n  useEffect(() => {\r\n  }, [JSON.stringify(queueArray)]);\r\n\r\n  const addComponent = (Component) => {\r\n    if (Component) {\r\n      Component.id = componentArray.length;\r\n      setComponentArray(componentArray.concat(Component));\r\n    }\r\n  };\r\n\r\n  const removeComponent = (Index) => {\r\n    // Check if the timers are active and remove the from the corresponding array\r\n    if (!queueActive) {\r\n      const tempArray = [...componentArray];\r\n      tempArray.splice(Index, 1);\r\n      setComponentArray(tempArray);\r\n    } else {\r\n      const tempArray = [...queueArray];\r\n      if (tempArray[Index].status === \"processing\") {\r\n        nextItem();\r\n      }\r\n      tempArray.splice(Index, 1);\r\n      setQueueArray(tempArray);\r\n      startQueue();\r\n    }\r\n  };\r\n\r\n  const updateItem = (Index) => {\r\n    let placeholderArray = [...queueArray];\r\n    if (allowUpdate) {\r\n      placeholderArray.map((timer) => {\r\n        if (timer.id === Index) {\r\n          switch (timer.name) {\r\n            case \"countdown\": {\r\n              timer.status = status;\r\n              timer.totalSeconds = totalSeconds;\r\n              return timer;\r\n            }\r\n            case \"tabata\": {\r\n              timer.status = status;\r\n              timer.totalSeconds = totalSeconds;\r\n              timer.round = round;\r\n              timer.initialRound = initialRound;\r\n              timer.roundType = roundType;\r\n              return timer;\r\n            }\r\n            case \"XY\": {\r\n              timer.status = status;\r\n              timer.totalSeconds = totalSeconds;\r\n              timer.initialTime = initialTime;\r\n              timer.round = round;\r\n              return timer;\r\n            }\r\n            case \"stopwatch\": {\r\n              timer.status = status;\r\n              timer.totalSeconds = totalSeconds;\r\n              timer.initialTime = initialTime;\r\n              timer.round = round;\r\n              return timer;\r\n            }\r\n            default: {\r\n              return timer;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      setQueueArray(placeholderArray);\r\n    }\r\n  };\r\n\r\n  const nextItem = () => {\r\n    switch (currentItem.name) {\r\n      case \"stopwatch\": {\r\n        stopwatchFinished()\r\n        return;\r\n      }\r\n      case \"countdown\": {\r\n       countdownFinish()\r\n        \r\n        return;\r\n      }\r\n      case \"XY\": {\r\n        XYFinish()\r\n        \r\n        return;\r\n      }\r\n      case \"tabata\": {\r\n       tabataFinish()\r\n        \r\n        return;\r\n      }\r\n      default: {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  const startQueue = async () => {\r\n    for (let i = 0; i < queueArray.length; i++) {\r\n      let currItem = queueArray[i];\r\n      if (currItem.status === \"processing\") {\r\n        break;\r\n      } else if (currItem.status === \"in-queue\") {\r\n        switch (currItem.name) {\r\n          default: {\r\n            return;\r\n          }\r\n          case \"countdown\": {\r\n            setCurrentItem(currItem);\r\n            setName(\"countdown\");\r\n            setSeconds(currItem.seconds);\r\n            setMinutes(currItem.minutes);\r\n            setTotalSeconds(currItem.totalSeconds);\r\n            setInitialTime(currItem.initialTime);\r\n            setStartCountdown(true);\r\n            setCurrID(currItem.id);\r\n            setStatus(\"processing\");\r\n            return;\r\n          }\r\n          case \"tabata\": {\r\n            setCurrentItem(currItem);\r\n            setName(\"tabata\");\r\n            setWork(currItem.work);\r\n            setRest(currItem.rest);\r\n            setRound(currItem.round);\r\n            setInitialRound(currItem.initialRound);\r\n            setRoundType(\"work\");\r\n            setCurrID(currItem.id);\r\n            setTotalSeconds(currItem.totalSeconds);\r\n            setStartTabata(true);\r\n            setStatus(\"processing\");\r\n            return;\r\n          }\r\n          case \"XY\": {\r\n            setCurrentItem(currItem);\r\n            setName(\"XY\");\r\n            setInitialTime(currItem.totalSeconds);\r\n            setTotalSeconds(currItem.totalSeconds);\r\n            setRound(currItem.round);\r\n            setInitialRound(currItem.initialRound);\r\n            setCurrID(currItem.id);\r\n            setStartXY(true);\r\n            setStatus(\"processing\");\r\n            return;\r\n          }\r\n          case \"stopwatch\": {\r\n            setCurrentItem(currItem);\r\n            setName(\"stopwatch\");\r\n            setSeconds(currItem.seconds);\r\n            setMinutes(currItem.minutes);\r\n            setTotalSeconds(currItem.totalSeconds);\r\n            setInitialTime(currItem.initialTime);\r\n            setStartStopwatch(true);\r\n            setCurrID(currItem.id);\r\n            setStatus(\"processing\");\r\n            return;\r\n          }\r\n        }\r\n      } else if (i === queueArray.length - 1) {\r\n        // finish the method here\r\n      }\r\n    }\r\n  };\r\n\r\n  // Timer Methods\r\n\r\n  // Timer Helper Methods\r\n  const convertTimerToSeconds = () => {\r\n    const totalSeconds = minutes * 60 + seconds;\r\n    return totalSeconds;\r\n  };\r\n\r\n  const convertSecondsToTimer = (ConvertedSeconds) => {\r\n    setMinutes(Math.floor(ConvertedSeconds / 60));\r\n    const minutesRemainder = ConvertedSeconds % 60;\r\n    setSeconds(minutesRemainder);\r\n  };\r\n\r\n  const stopTimers = () => {\r\n    setAllowUpdate(true);\r\n    countdownStop();\r\n    tabataStop();\r\n    XYStop();\r\n    stopwatchStop();\r\n  };\r\n\r\n  const pauseTimers = () => {\r\n    setAllowUpdate(false);\r\n\r\n    setStartCountdown(false);\r\n    setStartTabata(false);\r\n    setStartXY(false);\r\n    setStartStopwatch(false);\r\n\r\n    let savedObj = {\r\n      name: name,\r\n      seconds: seconds,\r\n      minutes: minutes,\r\n      totalSeconds: totalSeconds,\r\n      initialTime: initialTime,\r\n      work: work,\r\n      rest: rest,\r\n      initialWork: initialWork,\r\n      initialRest: initialRest,\r\n      initialRound: initialRound,\r\n      round: round,\r\n      roundType: roundType,\r\n    };\r\n\r\n    setSavedInfo(savedObj);\r\n\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setName(undefined);\r\n    setSeconds(undefined);\r\n    setMinutes(undefined);\r\n    setTotalSeconds(undefined);\r\n    setInitialTime(undefined);\r\n    setWork(undefined);\r\n    setRest(undefined);\r\n    setInitialWork(undefined);\r\n    setInitialRest(undefined);\r\n    setInitialRound(undefined);\r\n    setRound(undefined);\r\n    setRoundType(undefined);\r\n  };\r\n\r\n  const resumeState = (obj) => {\r\n    setName(obj.name);\r\n    setSeconds(obj.seconds);\r\n    setMinutes(obj.minutes);\r\n    setTotalSeconds(obj.totalSeconds);\r\n    setInitialTime(obj.initialTime);\r\n    setWork(obj.work);\r\n    setRest(obj.rest);\r\n    setInitialWork(obj.initialWork);\r\n    setInitialRest(obj.initialRest);\r\n    setInitialRound(obj.initialRound);\r\n    setRound(obj.round);\r\n    setRoundType(obj.roundType);\r\n  };\r\n\r\n  const resumeTimers = () => {\r\n    setAllowUpdate(true);\r\n    resumeState(savedInfo);\r\n\r\n    switch (savedInfo.name) {\r\n      default: {\r\n        return;\r\n      }\r\n      case \"countdown\": {\r\n        setStartCountdown(true);\r\n        return;\r\n      }\r\n      case \"tabata\": {\r\n        setStartTabata(true);\r\n        return;\r\n      }\r\n      case \"XY\": {\r\n        setStartXY(true);\r\n        return;\r\n      }\r\n      case \"stopwatch\": {\r\n        setStartStopwatch(true);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (status === \"processing\") {\r\n      updateItem(currID);\r\n    }\r\n  }, [minutes, seconds, round, work, rest, totalSeconds, roundType]);\r\n\r\n  useEffect(() => {\r\n    if (startTabata) {\r\n      tabataStart();\r\n    }\r\n    if (startCountdown) {\r\n      countdownStart();\r\n    }\r\n    if (startXY) {\r\n      XYStart();\r\n    }\r\n    if (startStopwatch) {\r\n      stopwatchStart();\r\n    }\r\n    return () => {};\r\n  }, [startTabata, startCountdown, startXY, startStopwatch]);\r\n  // When timer completes\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      updateItem(currID);\r\n      startQueue();\r\n    }\r\n  }, [status]);\r\n\r\n  // Countdown Timer\r\n\r\n  useEffect(() => {\r\n    if (startCountdown) {\r\n      timer.current = setInterval(() => {\r\n        if (totalSeconds > 0) {\r\n          const seconds = totalSeconds - 1;\r\n          setTotalSeconds(seconds);\r\n          convertSecondsToTimer(seconds);\r\n          updateItem(currID);\r\n          console.log(totalSeconds);\r\n        } else {\r\n          countdownFinish();\r\n        }\r\n      }, 1000);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [totalSeconds]);\r\n\r\n  // Countdown controls\r\n\r\n  const countdownStart = () => {\r\n    const initialSeconds = convertTimerToSeconds();\r\n    setInitialTime(initialSeconds);\r\n    setTotalSeconds(convertTimerToSeconds());\r\n  };\r\n\r\n  const countdownStop = () => {\r\n    setStartCountdown(false);\r\n    clearInterval(timer.current);\r\n  };\r\n\r\n  const countdownFinish = () => {\r\n    setStartCountdown(false);\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(0);\r\n    setStatus(\"completed\");\r\n  };\r\n\r\n  // Tabata Timer\r\n\r\n  useEffect(() => {\r\n    if (startTabata) {\r\n      timer.current = setInterval(() => {\r\n        if (work > -1) {\r\n          if (work === 0) {\r\n            setWork(work - 1);\r\n            setTotalSeconds(rest);\r\n            setRoundType(\"rest\");\r\n          } else {\r\n            setWork(work - 1);\r\n            setTotalSeconds(work - 1);\r\n            setRoundType(\"work\");\r\n          }\r\n        } else if (rest > 0) {\r\n          setRest(rest - 1);\r\n          setTotalSeconds(rest - 1);\r\n          setRoundType(\"rest\");\r\n        } else if (round > 1) {\r\n          setRoundType(\"work\");\r\n          setRound(round - 1);\r\n          setTotalSeconds(initialWork);\r\n          setWork(initialWork);\r\n          setRest(initialRest);\r\n        } else {\r\n          tabataFinish();\r\n        }\r\n      }, 1000);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [initialRound, round, rest, work, totalSeconds]);\r\n\r\n  // Tabata controls\r\n\r\n  const tabataStart = () => {\r\n    setInitialWork(work);\r\n    setInitialRest(rest);\r\n    setInitialRound(round);\r\n  };\r\n\r\n  const tabataStop = () => {\r\n    clearInterval(timer.current);\r\n    setTotalSeconds(0);\r\n    setRoundType(\"work\");\r\n    setStartTabata(false);\r\n  };\r\n\r\n  const tabataFinish = () => {\r\n    clearInterval(timer.current);\r\n    setWork(0);\r\n    setRest(0);\r\n    setStartTabata(false);\r\n    setStatus(\"completed\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (startXY) {\r\n      timer.current = setInterval(() => {\r\n        if (totalSeconds > 0) {\r\n          const seconds = totalSeconds - 1;\r\n          setTotalSeconds(seconds);\r\n        } else {\r\n          if (round > 1) {\r\n            const currRound = round - 1;\r\n            setRound(currRound);\r\n            setTotalSeconds(initialTime);\r\n          } else {\r\n            XYFinish();\r\n          }\r\n        }\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [round, totalSeconds]);\r\n\r\n  const XYStart = () => {\r\n    setInitialRound(round);\r\n    setInitialTime(totalSeconds);\r\n    setTotalSeconds(0);\r\n  };\r\n\r\n  const XYStop = () => {\r\n    clearInterval(timer.current);\r\n    setTotalSeconds(0);\r\n    setStartXY(false);\r\n  };\r\n\r\n  const XYFinish = () => {\r\n    clearInterval(timer.current);\r\n    setStartTabata(false);\r\n    setStatus(\"completed\");\r\n    setInitialRound(0);\r\n    setInitialTime(0);\r\n  };\r\n\r\n  // Stopwatch\r\n\r\n  useEffect(() => {\r\n    if (startStopwatch) {\r\n      timer.current = setInterval(() => {\r\n        if (totalSeconds < initialTime) {\r\n          const seconds = totalSeconds + 1;\r\n          setTotalSeconds(seconds);\r\n          convertSecondsToTimer(seconds);\r\n        } else {\r\n          stopwatchFinished();\r\n        }\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer.current);\r\n      };\r\n    }\r\n  }, [initialTime, totalSeconds]);\r\n\r\n  const stopwatchStart = () => {\r\n    setTotalSeconds(totalSeconds);\r\n    setInitialTime(initialTime);\r\n  };\r\n\r\n  const stopwatchStop = () => {\r\n    setStartStopwatch(false);\r\n    clearInterval(timer.current);\r\n    setTotalSeconds(0);\r\n    setInitialTime(0);\r\n  };\r\n\r\n  const stopwatchFinished = () => {\r\n    clearInterval(timer.current);\r\n    setStartStopwatch(false);\r\n    setStatus(\"completed\");\r\n    setTotalSeconds(0);\r\n    setInitialTime(0);\r\n  };\r\n\r\n  return (\r\n    <QueueContext.Provider\r\n      value={{\r\n        componentArray,\r\n        setComponentArray,\r\n        addComponent,\r\n        removeComponent,\r\n        startCountdown,\r\n        startQueue,\r\n        queueArray,\r\n        stopTimers,\r\n        setQueueArray,\r\n        setQueueActive,\r\n        pauseTimers,\r\n        resumeTimers,\r\n        nextItem\r\n      }}\r\n    >\r\n      {props.children}\r\n    </QueueContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { QueueContext } from \"./QueueContext\";\r\n\r\nexport const CountdownContext = createContext();\r\n\r\nexport const CountdownProvider = (props) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [totalSeconds, setTotalSeconds] = useState(0);\r\n  const [initialTime, setInitialTime] = useState(0);\r\n  const [work, setWork] = useState(0);\r\n  const [rest, setRest] = useState(0);\r\n  const [initialWork, setInitialWork] = useState(0);\r\n  const [initialRest, setInitialRest] = useState(0);\r\n  const [initialRound, setInitialRound] = useState(0);\r\n  const [round, setRound] = useState(0);\r\n  const [roundType, setRoundType] = useState(\"work\");\r\n\r\n\r\n  const { startQueue } = useContext(QueueContext);\r\n\r\n  const [isCountdownActive, setIsCountdownActive] = useState(false);\r\n  const [isTabataActive, setIsTabataActive] = useState(false);\r\n\r\n  let timer = useRef(null);\r\n\r\n  // Countdown Timer\r\n  useEffect(() => {\r\n    timer.current = setInterval(() => {\r\n      if (isCountdownActive) {\r\n        if (totalSeconds >= 0) {\r\n          const seconds = totalSeconds - 1;\r\n          setTotalSeconds(seconds);\r\n          convertSecondsToTimer(seconds);\r\n\r\n          console.log(totalSeconds);\r\n        } else {\r\n          clearInterval(timer.current);\r\n          startQueue();\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [isCountdownActive, totalSeconds]);\r\n\r\n  // Tabata Timer\r\n  useEffect(() => {\r\n    timer.current = setInterval(() => {\r\n      if (isTabataActive) {\r\n        if (work > 0) {\r\n          const workSeconds = work - 1;\r\n          setWork(workSeconds);\r\n          setRoundType(\"work\");\r\n        } else if (rest > 0) {\r\n          const restSeconds = rest - 1;\r\n          setRest(restSeconds);\r\n          setRoundType(\"rest\");\r\n        } else if (round > 1) {\r\n          setRoundType(\"work\");\r\n          const currRound = round - 1;\r\n          setRound(currRound);\r\n          setWork(initialWork);\r\n          setRest(initialRest);\r\n        } else {\r\n          tabataFinish();\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer.current);\r\n    };\r\n  }, [isTabataActive, round, rest, work]);\r\n\r\n  const convertTimerToSeconds = () => {\r\n    const totalSeconds = 3600 + minutes * 60 + seconds;\r\n    return totalSeconds;\r\n  };\r\n\r\n  const convertSecondsToTimer = (ConvertedSeconds) => {\r\n    setMinutes(Math.floor(ConvertedSeconds / 60));\r\n    const minutesRemainder = ConvertedSeconds % 60;\r\n    setSeconds(minutesRemainder % 60);\r\n  };\r\n\r\n  // Countdown controls\r\n\r\n  const countdownStart = () => {\r\n    const initialSeconds = convertTimerToSeconds();\r\n    setIsCountdownActive(true);\r\n    setInitialTime(initialSeconds);\r\n    setTotalSeconds(convertTimerToSeconds());\r\n  };\r\n\r\n  const countdownStop = () => {\r\n    setIsCountdownActive(false);\r\n    clearInterval(timer.current);\r\n  };\r\n\r\n  const countdownFinish = () => {\r\n    setIsCountdownActive(false);\r\n    clearInterval(timer.current);\r\n    convertSecondsToTimer(0);\r\n    startQueue();\r\n  };\r\n\r\n  // Tabata controls\r\n\r\n  const tabataStart = () => {\r\n    setInitialWork(work);\r\n    setInitialRest(rest);\r\n    setIsTabataActive(true);\r\n  };\r\n\r\n  const tabataStop = () => {\r\n    clearInterval(timer.current);\r\n    setIsTabataActive(false);\r\n  };\r\n\r\n  const tabataFinish = () => {\r\n    clearInterval(timer.current);\r\n    setWork(0);\r\n    setRest(0);\r\n    setIsTabataActive(false);\r\n    startQueue();\r\n  };\r\n\r\n  return (\r\n    // Convert all of the days, hours, minutes, and seconds into seconds so we can more easily process the data\r\n\r\n    <>\r\n      <CountdownContext.Provider\r\n        value={{\r\n          countdownStart,\r\n          countdownStop,\r\n          countdownFinish,\r\n          tabataStart,\r\n          tabataStop,\r\n          tabataFinish,\r\n          seconds,\r\n          setSeconds,\r\n          minutes,\r\n          setMinutes,\r\n\r\n          totalSeconds,\r\n          setTotalSeconds,\r\n          initialTime,\r\n          setInitialTime,\r\n\r\n          work,\r\n          setWork,\r\n          rest,\r\n          setRest,\r\n          initialWork,\r\n          setInitialWork,\r\n          initialRest,\r\n          setInitialRest,\r\n          initialRound,\r\n          setInitialRound,\r\n          round,\r\n          setRound,\r\n          convertSecondsToTimer,\r\n          roundType\r\n        }}\r\n      >\r\n        {props.children}\r\n      </CountdownContext.Provider>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Stopwatch from \"../components/timers/Stopwatch\";\r\nimport Countdown from \"../components/timers/Countdown\";\r\nimport XY from \"../components/timers/XY\";\r\nimport Tabata from \"../components/timers/Tabata\";\r\nimport Background from \"../components/generic/Background/Background\";\r\nimport NeonParagraph from \"../components/generic/Paragraph/NeonParagraph\";\r\nimport NeonButton from \"../components/generic/Button/NeonButtons\";\r\nimport FlexColumn from \"../components/generic/FlexDivs/FlexColumn\";\r\nimport FlexRow from \"../components/generic/FlexDivs/FlexRow\";\r\nimport { MenuContext } from \"../components/Context/MenuContext\";\r\nimport { QueueContext } from \"../components/Context/QueueContext\";\r\nimport { TimerContext } from \"../components/Context/TimersContext\";\r\n\r\nfunction App() {\r\n  const { stopwatch, setStopwatch } = useContext(MenuContext);\r\n  const { countdown, setCountdown } = useContext(MenuContext);\r\n  const { xy, setXY } = useContext(MenuContext);\r\n  const { tabata, setTabata } = useContext(MenuContext);\r\n  const { menu, setMenu } = useContext(MenuContext);\r\n\r\n  const { addComponent } = useContext(QueueContext);\r\n\r\n  const { seconds, minutes, hours, totalSeconds, initialTime, isActive } =\r\n    useContext(TimerContext);\r\n\r\n  const {\r\n    work,\r\n    rest,\r\n    initialWork,\r\n    initialRest,\r\n    initialRound,\r\n    round,\r\n    roundType,\r\n  } = useContext(TimerContext);\r\n\r\n  const { setDefaultState } = useContext(TimerContext);\r\n\r\n  const [dataToSend, setDataToSend] = useState(undefined);\r\n\r\n  const toggleCountdown = () => {\r\n    setCountdown(!countdown);\r\n    setMenu(false);\r\n    //setNonMenu(true);\r\n  };\r\n  const toggleXY = () => {\r\n    setXY(!xy);\r\n    setMenu(false);\r\n    //setNonMenu(true);\r\n  };\r\n  const toggleTabata = () => {\r\n    setTabata(!tabata);\r\n    setMenu(false);\r\n    //setNonMenu(true);\r\n  };\r\n  const toggleStopwatch = () => {\r\n    setStopwatch(!stopwatch);\r\n    setMenu(false);\r\n    //setNonMenu(true);\r\n  };\r\n\r\n  const returnToMenu = () => {\r\n    setMenu(true);\r\n    //setNonMenu(false);\r\n    setTabata(false);\r\n    setXY(false);\r\n    setCountdown(false);\r\n    setStopwatch(false);\r\n  };\r\n\r\n  let countdownStateArray = {\r\n    name: \"countdown\",\r\n    id: 0,\r\n    status: \"in-queue\",\r\n    seconds,\r\n    minutes,\r\n    hours,\r\n    totalSeconds,\r\n    isActive,\r\n  };\r\n\r\n  let stopwatchStateArray = {\r\n    name: \"stopwatch\",\r\n    id: 0,\r\n    status: \"in-queue\",\r\n    seconds,\r\n    minutes,\r\n    hours,\r\n    totalSeconds,\r\n    initialTime,\r\n    isActive,\r\n  };\r\n\r\n  let tabataStateArray = {\r\n    name: \"tabata\",\r\n    id: 0,\r\n    status: \"in-queue\",\r\n    work,\r\n    rest,\r\n    initialWork,\r\n    initialRest,\r\n    initialRound: round,\r\n    round,\r\n    roundType,\r\n    totalSeconds,\r\n  };\r\n\r\n  let xyStateArray = {\r\n    name: \"XY\",\r\n    id: 0,\r\n    status: \"in-queue\",\r\n    totalSeconds,\r\n    round,\r\n    initialRound: round,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countdown) {\r\n      setDataToSend(countdownStateArray);\r\n    }\r\n    if (tabata) {\r\n      setDataToSend(tabataStateArray);\r\n    }\r\n    if (xy) {\r\n      setDataToSend(xyStateArray);\r\n    }\r\n    if (stopwatch) {\r\n      setDataToSend(stopwatchStateArray);\r\n    }\r\n    return () => {};\r\n  }, [totalSeconds, round, work, rest, initialTime]);\r\n\r\n  // const sendDefaultTimers = () => {\r\n  //   const obj1 = {\r\n  //     name: \"stopwatch\",\r\n  //     id: 0,\r\n  //     status: \"in-queue\",\r\n  //     seconds: 3,\r\n  //     minutes: 0,\r\n  //     hours: 0,\r\n  //     totalSeconds: 0,\r\n  //     initialTime: 3,\r\n  //   };\r\n  //   const obj2 = {\r\n  //     name: \"countdown\",\r\n  //     id: 1,\r\n  //     status: \"in-queue\",\r\n  //     seconds: 3,\r\n  //     minutes: 0,\r\n  //     hours: 0,\r\n  //     totalSeconds: 3,\r\n  //   };\r\n\r\n  //   const obj3 = {\r\n  //     name: \"XY\",\r\n  //     id: 2,\r\n  //     status: \"in-queue\",\r\n  //     totalSeconds: 4,\r\n  //     round: 1,\r\n  //     initialRound: 1,\r\n  //   };\r\n  //   const obj4 = {\r\n  //     name: \"stopwatch\",\r\n  //     id: 3,\r\n  //     status: \"in-queue\",\r\n  //     seconds: 6,\r\n  //     minutes: 0,\r\n  //     hours: 0,\r\n  //     totalSeconds: 0,\r\n  //     initialTime: 6,\r\n  //   };\r\n  //   addComponent(obj1);\r\n  //   addComponent(obj2);\r\n  //   addComponent(obj3);\r\n  //   addComponent(obj4);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   sendDefaultTimers();\r\n  // },[])\r\n\r\n  return (\r\n    <>\r\n      <FlexRow width=\"500px\">\r\n        <FlexColumn>\r\n          {menu && (\r\n            <Background>\r\n              <NeonParagraph color=\"red\">Choose Timer</NeonParagraph>\r\n              <FlexColumn width=\"100%\" centered=\"true\">\r\n                <FlexRow width=\"100%\" height=\"40%\">\r\n                  <FlexColumn>\r\n                    <NeonParagraph color=\"white\">XY</NeonParagraph>\r\n                    <NeonButton onClick={toggleXY}>O</NeonButton>\r\n                  </FlexColumn>\r\n                  <FlexColumn>\r\n                    <NeonParagraph color=\"white\">Stopwatch</NeonParagraph>\r\n                    <NeonButton onClick={toggleStopwatch}>O</NeonButton>\r\n                  </FlexColumn>\r\n                </FlexRow>\r\n                <FlexRow width=\"100%\" height=\"40% \">\r\n                  <FlexColumn>\r\n                    <NeonParagraph color=\"white\">Tabata</NeonParagraph>\r\n                    <NeonButton onClick={toggleTabata}>O</NeonButton>\r\n                  </FlexColumn>\r\n                  <FlexColumn>\r\n                    <NeonParagraph color=\"white\">Countdown</NeonParagraph>\r\n                    <NeonButton onClick={toggleCountdown}>O</NeonButton>\r\n                  </FlexColumn>\r\n                </FlexRow>\r\n              </FlexColumn>\r\n            </Background>\r\n          )}\r\n          {stopwatch && <Stopwatch></Stopwatch>}\r\n          {xy && <XY></XY>}\r\n          {countdown && <Countdown></Countdown>}\r\n          {tabata && <Tabata></Tabata>}\r\n        </FlexColumn>\r\n        {!menu && (\r\n          <FlexColumn width=\"100px\" height=\"300px\">\r\n            {(totalSeconds > 0 || initialTime > 0) &&\r\n            <Link to=\"/\">\r\n              <NeonButton\r\n                onClick={() => {\r\n                  returnToMenu();\r\n                  addComponent(dataToSend);\r\n                  setDefaultState();\r\n                }}\r\n              >\r\n                <NeonParagraph color=\"white\" size=\"8px\">\r\n                  Add\r\n                </NeonParagraph>\r\n              </NeonButton>\r\n            </Link>}\r\n\r\n            <NeonButton\r\n              onClick={() => {\r\n                setDefaultState();\r\n                returnToMenu();\r\n              }}\r\n              className=\"PauseButton\"\r\n            >\r\n              <NeonParagraph color=\"white\" size=\"8px\">\r\n                Back\r\n              </NeonParagraph>\r\n            </NeonButton>\r\n          </FlexColumn>\r\n        )}\r\n      </FlexRow>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import react from \"react\";\r\nimport TimersView from \"../views/TimersView\"\r\n\r\nfunction Add() {\r\n    return(\r\n        <TimersView></TimersView>\r\n    );\r\n   \r\n}\r\n\r\nexport default Add;","import \"./SimpleBackground.css\";\r\nimport FlexColumn from \"../FlexDivs/FlexColumn.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SimpleBackground = (props) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          backgroundColor: \"white\",\r\n          width: props.width,\r\n          height: props.height,\r\n          flexDirection: \"column\",\r\n          padding: props.padding,\r\n          borderRadius: \"25px\",\r\n          margin: props.margin\r\n        }}\r\n        className=\"Background\"\r\n      >\r\n        <FlexColumn\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          centered=\"true\"\r\n          spaceAround=\"true\"\r\n        >\r\n          <div className=\"container\">\r\n            <FlexColumn\r\n              padding=\"10px\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              centered= \"true\"\r\n            >\r\n              {props.children}\r\n            </FlexColumn>\r\n          </div>\r\n        </FlexColumn>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nSimpleBackground.propTypes = {\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nSimpleBackground.defaultProps = {\r\n  width: 300,\r\n  height: 400,\r\n  padding: \"10px\",\r\n  margin: \"2px\"\r\n};\r\n\r\nexport default SimpleBackground;\r\n","import react, { useContext } from \"react\";\r\nimport FlexColumn from \"../generic/FlexDivs/FlexColumn\";\r\nimport NeonParagraph from \"../generic/Paragraph/NeonParagraph\";\r\nimport PropTypes from \"prop-types\";\r\nimport NeonButton from \"../generic/Button/NeonButtons\";\r\nimport { QueueContext } from \"../Context/QueueContext\";\r\nimport Background from \"../generic/Background/Background\";\r\nimport SimpleBackground from \"../generic/Background/SimpleBackground\";\r\n\r\nconst SmallTimerInfo = (props) => {\r\n  const index = props.index;\r\n\r\n  const { removeComponent } = useContext(QueueContext);\r\n\r\n  function pad(n) {\r\n    return n < 10 ? \"0\" + n : n;\r\n  }\r\n\r\n  const convertSecondsToTimer = (value) => {\r\n    let minutes = 0;\r\n    let seconds = 0;\r\n    minutes = Math.floor(value / 60);\r\n    seconds = value % 60;\r\n    return `${pad(minutes)}m : ${pad(seconds)}s`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FlexColumn>\r\n        <SimpleBackground\r\n          width=\"100px\"\r\n          height=\"100px\"\r\n          padding=\"20px\"\r\n          margin=\"10px\"\r\n        >\r\n          <FlexColumn spaceEvenly=\"true\">\r\n            <NeonParagraph padding=\"5px\" size=\"12px\">\r\n              {props.name}\r\n            </NeonParagraph>\r\n            {props.name === 'stopwatch' && (\r\n              <NeonParagraph padding=\"5px\" size=\"12px\">\r\n                {`final time: ${convertSecondsToTimer(props.initialTime)}`}\r\n              </NeonParagraph>\r\n            )}\r\n            <NeonParagraph padding=\"5px\" size=\"12px\">\r\n              {convertSecondsToTimer(props.time)}\r\n            </NeonParagraph>\r\n            {props.currRound && (\r\n              <NeonParagraph padding=\"5px\" size=\"12px\">\r\n                {`${props.currRound} of ${props.totalRound}`}\r\n              </NeonParagraph>\r\n            )}\r\n            <NeonParagraph padding=\"5px\" size=\"12px\">\r\n              {props.currState}\r\n            </NeonParagraph>\r\n\r\n            <NeonParagraph padding=\"5px\" size=\"12px\">\r\n              {props.status}\r\n            </NeonParagraph>\r\n          </FlexColumn>\r\n        </SimpleBackground>\r\n        {props.status !== \"processing\" &&\r\n        <NeonButton\r\n          onClick={() => {\r\n            removeComponent(props.index);\r\n          }}\r\n          padding=\"5px\"\r\n          width=\"20px\"\r\n          height=\"20px\"\r\n          fontSize=\"8px\"\r\n          className=\"ClearButton\"\r\n        >\r\n          X\r\n        </NeonButton>}\r\n      </FlexColumn>\r\n    </>\r\n  );\r\n};\r\n\r\nSmallTimerInfo.propTypes = {\r\n  name: PropTypes.string,\r\n  time: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  currRound: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  totalRound: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  currState: PropTypes.string,\r\n};\r\n\r\nSmallTimerInfo.defaultProps = {\r\n  name: \"\",\r\n  time: \"0\",\r\n  currRound: \"\",\r\n  totalRound: \"\",\r\n  currState: \"\",\r\n};\r\n\r\nexport default SmallTimerInfo;\r\n","import react, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FlexColumn from \"../components/generic/FlexDivs/FlexColumn\";\r\nimport FlexRow from \"../components/generic/FlexDivs/FlexRow\";\r\nimport NeonParagraph from \"../components/generic/Paragraph/NeonParagraph\";\r\nimport { QueueContext } from \"../components/Context/QueueContext\";\r\nimport NeonButton from \"../components/generic/Button/NeonButtons\";\r\nimport SmallTimerInfo from \"../components/timers/SmallTimerInfo.js\";\r\nimport { QueueProvider } from \"../components/Context/QueueContext\";\r\n\r\nconst Home = () => {\r\n  const { componentArray, queueArray, setQueueArray, setQueueActive } = useContext(QueueContext);\r\n  const { startQueue, stopTimers, pauseTimers, resumeTimers, nextItem } = useContext(QueueContext);\r\n  const [currArray, setCurrArray] = useState(componentArray);\r\n\r\n  const [useArrayQueue, setUseArrayQueue] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n      if(useArrayQueue) {\r\n        setQueueActive(true);\r\n        setCurrArray(queueArray)\r\n      }\r\n      else {\r\n        setQueueActive(false);\r\n        setCurrArray(componentArray);\r\n      }\r\n  }, [useArrayQueue, JSON.stringify(queueArray), JSON.stringify(componentArray)]);\r\n\r\n  useEffect(() => {\r\n    if(useArrayQueue) {\r\n      startQueue()\r\n    }\r\n}, [currArray]);\r\n\r\nuseEffect(()=> {\r\n\r\n},[isPaused]);\r\n\r\n  return (\r\n    <FlexColumn>\r\n      {(componentArray.length > 0) && <NeonParagraph> Timers In Queue</NeonParagraph>}\r\n      <FlexRow height=\"auto\">\r\n        {currArray.map((timer, i) => {\r\n          if (timer.name === \"countdown\") {\r\n            return (\r\n              <SmallTimerInfo\r\n                name={timer.name}\r\n                time={timer.totalSeconds}\r\n                index={i}\r\n                status={timer.status}\r\n              ></SmallTimerInfo>\r\n            );\r\n          }\r\n          if (timer.name === \"tabata\") {\r\n            return (\r\n              <SmallTimerInfo\r\n                name={timer.name}\r\n                time={timer.totalSeconds}\r\n                currRound={(timer.initialRound - timer.round + 1)}\r\n                totalRound={timer.initialRound}\r\n                currState={timer.roundType}\r\n                index={i}\r\n                status={timer.status}\r\n              ></SmallTimerInfo>\r\n            );\r\n          }\r\n          if (timer.name === \"XY\") {\r\n            return (\r\n              <SmallTimerInfo\r\n                name={timer.name}\r\n                time={timer.totalSeconds}\r\n                currRound={(timer.initialRound - timer.round + 1)}\r\n                totalRound={timer.initialRound}\r\n                index={i}\r\n                status={timer.status}\r\n              ></SmallTimerInfo>\r\n            );\r\n          }\r\n          if (timer.name === \"stopwatch\") {\r\n            return (\r\n              <SmallTimerInfo\r\n                name={timer.name}\r\n                time={timer.totalSeconds}\r\n                initialTime = {timer.initialTime}\r\n                index={i}\r\n                status={timer.status}\r\n              ></SmallTimerInfo>\r\n            );\r\n          }\r\n        })}\r\n\r\n        {!useArrayQueue && <FlexColumn>\r\n          <Link to=\"/add\">\r\n            <NeonButton>+</NeonButton>\r\n          </Link>\r\n          <NeonParagraph> Add Timer</NeonParagraph>\r\n        </FlexColumn>}\r\n      </FlexRow>\r\n      <FlexRow>\r\n       {(!useArrayQueue && (componentArray.length > 0)) && <NeonButton\r\n          onClick={() => {\r\n            setQueueArray(JSON.parse(JSON.stringify(componentArray)));\r\n            setUseArrayQueue(true);\r\n          }}\r\n          className=\"StartButton\"\r\n          width=\"20vw\"\r\n          margin=\"10px\"\r\n        >\r\n          Start\r\n        </NeonButton>}\r\n        {(useArrayQueue && !isPaused) && <NeonButton\r\n          onClick={() => {\r\n            pauseTimers();\r\n            setIsPaused(true);\r\n          }}\r\n          className=\"PauseButton\"\r\n          width=\"20vw\"\r\n          margin=\"10px\"\r\n        >\r\n          Pause\r\n        </NeonButton>}\r\n        \r\n        {(useArrayQueue && isPaused) && <NeonButton\r\n          onClick={() => {\r\n            resumeTimers();\r\n            setIsPaused(false);\r\n          }}\r\n          className=\"StartButton\"\r\n          width=\"20vw\"\r\n          margin=\"10px\"\r\n        >\r\n          Resume\r\n        </NeonButton>}\r\n        {useArrayQueue && <NeonButton\r\n          onClick={() => {\r\n            nextItem();\r\n          }}\r\n          className=\"RestartButton\"\r\n          width=\"10vw\"\r\n          margin=\"10px\"\r\n        >\r\n          Skip\r\n        </NeonButton>}\r\n        {useArrayQueue && <NeonButton\r\n          onClick={() => {\r\n            setIsPaused(false);\r\n            stopTimers();\r\n            setUseArrayQueue(false);\r\n            \r\n          }}\r\n          className=\"ClearButton\"\r\n          width=\"20vw\"\r\n          margin=\"10px\"\r\n        >\r\n          Stop\r\n        </NeonButton>}\r\n      </FlexRow>\r\n    </FlexColumn>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport DocumentationView from \"./views/DocumentationView\";\r\nimport { TimerProvider } from \"./components/Context/TimersContext\";\r\nimport { MenuProvider } from \"./components/Context/MenuContext\";\r\nimport { CountdownProvider } from \"./components/Context/CountdownContext\";\r\nimport Add from \"./views/Add\";\r\nimport { QueueProvider } from \"./components/Context/QueueContext\";\r\nimport Home from \"./views/Home\";\r\nconst Container = styled.div`\r\n  background: #f0f6fb;\r\n  height: 100vh;\r\n  overflow: auto;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <TimerProvider>\r\n        <MenuProvider>\r\n          <QueueProvider>\r\n            <CountdownProvider>\r\n              <Router>\r\n                <nav>\r\n                  <ul>\r\n                    <li>\r\n                      <Link to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li>\r\n                      <Link to=\"/docs\">Documentation</Link>\r\n                    </li>\r\n                  </ul>\r\n                </nav>\r\n                <Switch>\r\n                  <Route path=\"/add\">\r\n                    <Add />\r\n                  </Route>\r\n                  <Route path=\"/docs\">\r\n                    <DocumentationView />\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                    <Home></Home>\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </CountdownProvider>\r\n          </QueueProvider>\r\n        </MenuProvider>\r\n      </TimerProvider>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}